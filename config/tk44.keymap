/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick-tap-ms = <125>;
};

&mt {
    quick-tap-ms = <125>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_cps {
            timeout-ms = <20>;
            key-positions = <21 42>;
            bindings = <&kp CAPS>;
        };

        combo_cpsl {
            timeout-ms = <20>;
            key-positions = <18 39>;
            bindings = <&kp CAPS>;
        };

        combo_cps1 {
            timeout-ms = <20>;
            key-positions = <17 18>;
            bindings = <&kp CAPS>;
        };

        combo_cps2 {
            timeout-ms = <20>;
            key-positions = <21 22>;
            bindings = <&kp CAPS>;
        };

        combo_lbrc {
            timeout-ms = <20>;
            key-positions = <5 6>;
            bindings = <&kp LBKT>;
        };

        combo_rbrc {
            timeout-ms = <20>;
            key-positions = <7 8>;
            bindings = <&kp RBKT>;
        };

        combo_lbr {
            timeout-ms = <20>;
            key-positions = <18 19>;
            bindings = <&kp LPAR>;
        };

        combo_rbr {
            timeout-ms = <20>;
            key-positions = <20 21>;
            bindings = <&kp RPAR>;
        };

        combo_lcbr {
            timeout-ms = <20>;
            key-positions = <30 31>;
            bindings = <&kp LBRC>;
        };

        combo_rcbr {
            timeout-ms = <20>;
            key-positions = <32 33>;
            bindings = <&kp RBRC>;
        };

        combo_mins {
            timeout-ms = <20>;
            key-positions = <22 23>;
            bindings = <&kp MINUS>;
        };

        combo_mns {
            timeout-ms = <20>;
            key-positions = <23 24>;
            bindings = <&kp UNDER>;
        };

        combo_eql {
            timeout-ms = <20>;
            key-positions = <8 9>;
            bindings = <&kp EQUAL>;
        };

        combo_pls {
            timeout-ms = <20>;
            key-positions = <33 34>;
            bindings = <&kp PLUS>;
        };

        combo_spc {
            timeout-ms = <20>;
            key-positions = <9 10>;
            bindings = <&kp SPACE>;
        };

        combo_ent {
            timeout-ms = <20>;
            key-positions = <5 19>;
            bindings = <&kp RET>;
        };

        combo_bksp {
            timeout-ms = <20>;
            key-positions = <4 5>;
            bindings = <&kp BSPC>;
        };

        combo_lalp {
            timeout-ms = <20>;
            key-positions = <10 11>;
            bindings = <&kp LA(P)>;
        };

        combo_lalp2 {
            timeout-ms = <20>;
            key-positions = <11 12>;
            bindings = <&kp RG(LBKT)>;
        };

        combo_cps11 {
            bindings = <&kp CAPS>;
            key-positions = <32 21>;
        };

        combo_cps112 {
            bindings = <&kp CAPS>;
            key-positions = <31 18>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
            //        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
            //        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
            //                           | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
&kp LWIN  &kp GRAVE  &kp Q  &kp W        &kp E            &kp R        &kp T        &kp Y           &kp U        &kp I    &kp O     &kp P       &kp LBKT  &mt RWIN RBKT
          &kp LCTRL  &kp A  &kp S        &kp D            &kp F        &kp G        &kp H           &kp J        &kp K    &kp L  &kp SEMI  &mt RCTRL SQT
           &kp LALT  &kp Z  &kp X        &kp C            &kp V        &kp B        &kp N           &kp M    &kp COMMA  &kp DOT  &kp FSLH  &mt RALT BSLH
                                   &lt RSE TAB  &mt LSHFT SPACE  &lt LWR ESC  &lt LWR RET  &mt RSHFT BSPC  &lt RSE DEL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            //       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
            //       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans       &kp UNDER    &kp F1  &kp F2       &kp F3    &kp F4     &kp F5     &kp F6    &kp F7       &kp F8    &kp F9   &kp F10          &kp F11  &mt RGUI F12
        &mt LCTRL PLUS  &kp EXCL  &kp AT     &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS     &kp STAR  &kp LPAR  &kp RPAR  &mt RCTRL MINUS
        &mt LALT EQUAL    &kp N1  &kp N2       &kp N3    &kp N4     &kp N5     &kp N6    &kp N7       &kp N8    &kp N9    &kp N0           &trans
                                          &lt ADJ TAB    &trans     &trans     &trans    &trans  &lt ADJ DEL
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |     | NMLK |  /  |  7  |  8  |  9  |  -  |   | VOLU| HOME| PRSC| PGUP| SCLK| CLCK|     |
            //       | CTRL |  *  |  4  |  5  |  6  |  +  |   | MUT | LEFT|  UP | RGHT| INS | APP |
            //       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | DOWN| PGDN| PAUS|     |
            //                          |     |     | ADJ |   | ADJ |     |     |

            bindings = <
&trans       &kp KP_NUM     &kp KP_SLASH  &kp N7  &kp N8  &kp N9  &kp KP_MINUS  &kp C_VOL_UP  &kp HOME   &kp INS  &kp PG_UP         &kp SLCK         &kp CAPS  &trans
        &mt LCTRL EQUAL  &kp KP_MULTIPLY  &kp N4  &kp N5  &kp N6   &kp KP_PLUS    &kp C_MUTE  &kp LEFT    &kp UP  &kp RIGHT        &kp PSCRN  &mt RCTRL K_APP
                 &trans           &kp N0  &kp N1  &kp N2  &kp N3    &kp KP_DOT  &kp C_VOL_DN   &kp END  &kp DOWN  &kp PG_DN  &kp PAUSE_BREAK           &trans
                                                  &trans  &trans   &lt ADJ RET   &lt ADJ ESC    &trans    &trans
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
            //       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //       |      |     |     |     |     |     |   |     |     |     |     |     |      |
            //                          |     |     |     |   |     |     |     |

            bindings = <
&sys_reset   &bootloader         &none         &none         &none         &none         &none         &none         &none         &none         &none         &none   &bootloader  &sys_reset
              &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &bt BT_CLR
            &out OUT_TOG         &none         &none         &none         &none         &none         &none         &none         &none         &none         &none  &out OUT_TOG
                                                            &trans         &none        &trans        &trans         &none        &trans
            >;
        };
    };
};
